// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/com/xxdb/gui/component/XXDBTokenMaker.flex

package com.xxdb.gui.component;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Java programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>first line should define package : package com.xxdb.gui.component;
 *   <li>The generated <code>XXDBTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 *	 <li> you should find code by keyword: if (zzCurrentPosL < zzEndReadL) and replace the next tow line and the next 21st,22nd line to one line : zzInput = zzBufferL[zzCurrentPosL++];
 *    </li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 1.0
 *
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class XXDBTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;
  public static final int DOCCOMMENT = 4;
  public static final int EOL_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\3\22\0\1\5"+
    "\1\6\1\7\1\10\1\11\1\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\31\1\33"+
    "\1\34\1\35\1\20\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\14\1\75\1\15\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\121\1\132\1\76\1\133\1\41\6\0\1\3"+
    "\32\0\1\134\u01df\0\1\134\177\0\13\134\35\0\2\3"+
    "\5\0\1\134\57\0\1\134\240\0\1\134\377\0\u0100\135";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\1\2\4"+
    "\1\6\1\7\1\4\1\10\1\4\1\10\1\4\2\11"+
    "\3\4\1\12\25\10\1\13\4\10\1\14\17\10\1\15"+
    "\1\16\5\15\1\17\10\15\1\20\3\15\1\5\1\13"+
    "\1\5\1\21\1\0\1\22\1\6\1\23\1\24\1\25"+
    "\5\26\1\11\1\0\1\27\1\0\1\4\1\12\70\10"+
    "\1\30\2\10\1\30\22\10\1\30\7\10\1\30\1\10"+
    "\1\14\14\10\1\31\4\0\1\32\1\0\1\33\25\0"+
    "\2\5\1\0\1\6\1\34\1\6\1\23\1\0\1\35"+
    "\1\11\1\0\1\11\1\14\32\10\1\14\43\10\2\30"+
    "\5\10\1\30\11\10\1\30\20\10\37\0\1\5\1\0"+
    "\1\34\1\6\1\23\1\36\1\0\1\11\3\10\1\14"+
    "\3\10\1\14\4\10\1\14\20\10\1\14\25\10\1\37"+
    "\2\0\1\40\12\0\1\41\10\0\1\42\7\0\1\43"+
    "\1\5\1\0\1\6\1\11\16\10\1\14\5\10\1\0"+
    "\3\10\1\0\5\10\35\0\1\5\1\0\1\6\24\10"+
    "\2\0\1\10\1\0\1\44\1\10\23\0\21\10\2\0"+
    "\1\10\1\0\1\10\4\0\1\41\4\0\17\10\2\0"+
    "\1\10\1\30\1\10\11\0\12\10\5\0\10\10\5\0"+
    "\4\10\2\0\2\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\136\0\274\0\u011a\0\u0178\0\u01d6\0\u0178\0\u0234"+
    "\0\u0292\0\u02f0\0\u0178\0\u034e\0\u03ac\0\u0178\0\u040a\0\u0178"+
    "\0\u0468\0\u04c6\0\u0524\0\u0582\0\u05e0\0\u063e\0\u069c\0\u06fa"+
    "\0\u0758\0\u07b6\0\u0814\0\u0872\0\u08d0\0\u092e\0\u098c\0\u09ea"+
    "\0\u0a48\0\u0aa6\0\u0b04\0\u0b62\0\u0bc0\0\u0c1e\0\u0c7c\0\u0cda"+
    "\0\u0d38\0\u0d96\0\u0df4\0\u0e52\0\u0eb0\0\u0f0e\0\u0f6c\0\u0fca"+
    "\0\u1028\0\u1086\0\u10e4\0\u1142\0\u11a0\0\u11fe\0\u125c\0\u12ba"+
    "\0\u1318\0\u1376\0\u13d4\0\u1432\0\u1490\0\u14ee\0\u154c\0\u15aa"+
    "\0\u1608\0\u1666\0\u16c4\0\u1722\0\u0178\0\u1780\0\u17de\0\u183c"+
    "\0\u189a\0\u18f8\0\u0178\0\u1956\0\u19b4\0\u1a12\0\u1a70\0\u1ace"+
    "\0\u1b2c\0\u1b8a\0\u1be8\0\u0178\0\u1c46\0\u1ca4\0\u1d02\0\u1d60"+
    "\0\u0178\0\u1dbe\0\u0178\0\u1e1c\0\u0178\0\u1e7a\0\u1ed8\0\u1f36"+
    "\0\u0178\0\u1f94\0\u1ff2\0\u2050\0\u20ae\0\u210c\0\u2050\0\u216a"+
    "\0\u0178\0\u0234\0\u21c8\0\u2226\0\u2284\0\u22e2\0\u2340\0\u239e"+
    "\0\u23fc\0\u245a\0\u24b8\0\u2516\0\u2574\0\u25d2\0\u2630\0\u268e"+
    "\0\u26ec\0\u274a\0\u27a8\0\u2806\0\u2864\0\u28c2\0\u2920\0\u297e"+
    "\0\u29dc\0\u2a3a\0\u2a98\0\u2af6\0\u2b54\0\u2bb2\0\u2c10\0\u2c6e"+
    "\0\u2ccc\0\u2d2a\0\u2d88\0\u2de6\0\u2e44\0\u2ea2\0\u2f00\0\u2f5e"+
    "\0\u2fbc\0\u301a\0\u3078\0\u30d6\0\u3134\0\u3192\0\u31f0\0\u324e"+
    "\0\u32ac\0\u330a\0\u3368\0\u33c6\0\u3424\0\u3482\0\u34e0\0\u353e"+
    "\0\u359c\0\u35fa\0\u3658\0\u36b6\0\u3714\0\u3772\0\u37d0\0\u0b04"+
    "\0\u382e\0\u388c\0\u38ea\0\u3948\0\u39a6\0\u3a04\0\u3a62\0\u3ac0"+
    "\0\u3b1e\0\u3b7c\0\u3bda\0\u3c38\0\u3c96\0\u3cf4\0\u3d52\0\u3db0"+
    "\0\u3e0e\0\u3e6c\0\u3eca\0\u3f28\0\u3f86\0\u3fe4\0\u4042\0\u40a0"+
    "\0\u40fe\0\u415c\0\u41ba\0\u4218\0\u4276\0\u42d4\0\u4332\0\u4390"+
    "\0\u43ee\0\u444c\0\u44aa\0\u4508\0\u4566\0\u45c4\0\u4622\0\u4680"+
    "\0\u46de\0\u0178\0\u473c\0\u479a\0\u47f8\0\u4856\0\u0178\0\u48b4"+
    "\0\u0178\0\u4912\0\u4970\0\u49ce\0\u4a2c\0\u4a8a\0\u4ae8\0\u4b46"+
    "\0\u4ba4\0\u4c02\0\u4c60\0\u4cbe\0\u4d1c\0\u4d7a\0\u4dd8\0\u4e36"+
    "\0\u4e94\0\u4ef2\0\u4f50\0\u4fae\0\u500c\0\u506a\0\u50c8\0\u5126"+
    "\0\u5184\0\u51e2\0\u1e1c\0\u5240\0\u0178\0\u529e\0\u52fc\0\u535a"+
    "\0\u53b8\0\u5416\0\u0b04\0\u5474\0\u54d2\0\u5530\0\u558e\0\u55ec"+
    "\0\u564a\0\u56a8\0\u5706\0\u5764\0\u57c2\0\u5820\0\u587e\0\u58dc"+
    "\0\u593a\0\u5998\0\u59f6\0\u5a54\0\u5ab2\0\u5b10\0\u5b6e\0\u5bcc"+
    "\0\u5c2a\0\u5c88\0\u5ce6\0\u5d44\0\u5da2\0\u5e00\0\u5e5e\0\u5ebc"+
    "\0\u5f1a\0\u5f78\0\u5fd6\0\u6034\0\u6092\0\u60f0\0\u614e\0\u61ac"+
    "\0\u620a\0\u6268\0\u62c6\0\u6324\0\u6382\0\u63e0\0\u643e\0\u649c"+
    "\0\u64fa\0\u6558\0\u65b6\0\u6614\0\u6672\0\u66d0\0\u672e\0\u678c"+
    "\0\u67ea\0\u6848\0\u68a6\0\u6904\0\u6962\0\u69c0\0\u6a1e\0\u6a7c"+
    "\0\u6ada\0\u6b38\0\u6b96\0\u6bf4\0\u6c52\0\u6cb0\0\u6d0e\0\u6d6c"+
    "\0\u6dca\0\u6dca\0\u6e28\0\u6e86\0\u6ee4\0\u6f42\0\u6fa0\0\u6ffe"+
    "\0\u705c\0\u70ba\0\u7118\0\u7176\0\u71d4\0\u7232\0\u7290\0\u72ee"+
    "\0\u734c\0\u73aa\0\u7408\0\u7466\0\u74c4\0\u7522\0\u7580\0\u75de"+
    "\0\u763c\0\u769a\0\u76f8\0\u7756\0\u77b4\0\u7812\0\u7870\0\u78ce"+
    "\0\u792c\0\u798a\0\u79e8\0\u7a46\0\u7aa4\0\u7b02\0\u7b60\0\u7bbe"+
    "\0\u7c1c\0\u7c7a\0\u7cd8\0\u7d36\0\u7d94\0\u7df2\0\u7e50\0\u7eae"+
    "\0\u7f0c\0\u7f6a\0\u7fc8\0\u8026\0\u8084\0\u80e2\0\u8140\0\u819e"+
    "\0\u81fc\0\u825a\0\u82b8\0\u8316\0\u0178\0\u8374\0\u83d2\0\u0178"+
    "\0\u8430\0\u0178\0\u848e\0\u84ec\0\u854a\0\u85a8\0\u8606\0\u8664"+
    "\0\u86c2\0\u8720\0\u877e\0\u87dc\0\u883a\0\u8898\0\u88f6\0\u8954"+
    "\0\u89b2\0\u8a10\0\u8a6e\0\u8acc\0\u8b2a\0\u8b88\0\u8be6\0\u8c44"+
    "\0\u8ca2\0\u8d00\0\u8d5e\0\u8dbc\0\u8e1a\0\u8e78\0\u8ed6\0\u8f34"+
    "\0\u7118\0\u8f92\0\u8ff0\0\u904e\0\u90ac\0\u910a\0\u9168\0\u91c6"+
    "\0\u9224\0\u9282\0\u92e0\0\u933e\0\u939c\0\u93fa\0\u9458\0\u94b6"+
    "\0\u9514\0\u9572\0\u95d0\0\u962e\0\u968c\0\u0b04\0\u96ea\0\u9748"+
    "\0\u97a6\0\u9804\0\u9862\0\u98c0\0\u991e\0\u997c\0\u99da\0\u9a38"+
    "\0\u9a96\0\u9af4\0\u9b52\0\u0178\0\u9bb0\0\u9c0e\0\u9c6c\0\u9cca"+
    "\0\u9d28\0\u9d86\0\u9de4\0\u9e42\0\u9ea0\0\u9efe\0\u9f5c\0\u9fba"+
    "\0\ua018\0\ua076\0\ua0d4\0\ua132\0\ua190\0\ua1ee\0\ua24c\0\ua2aa"+
    "\0\u8430\0\ua308\0\ua366\0\ua3c4\0\ua422\0\ua480\0\ua4de\0\ua53c"+
    "\0\ua59a\0\ua5f8\0\ua656\0\ua6b4\0\ua712\0\ua770\0\ua7ce\0\ua82c"+
    "\0\ua88a\0\ua8e8\0\ua946\0\ua9a4\0\uaa02\0\uaa60\0\uaabe\0\u6b38"+
    "\0\uab1c\0\uab7a\0\uabd8\0\uac36\0\uac94\0\uacf2\0\uad50\0\uadae"+
    "\0\u97a6\0\uae0c\0\uae6a\0\uaec8\0\uaf26\0\uaf84\0\uafe2\0\ub040"+
    "\0\ub09e\0\ub0fc\0\ub15a\0\ub1b8\0\ub216\0\ub274\0\ub2d2\0\ub330"+
    "\0\ub38e\0\ub3ec\0\ub44a\0\u9ea0\0\ub4a8\0\ub506\0\ub564\0\ub5c2"+
    "\0\ub620\0\ub67e\0\ub6dc\0\ua190\0\ub73a\0\ub798\0\ub7f6\0\ub854"+
    "\0\ub8b2\0\ub910\0\ub96e\0\ub9cc\0\uba2a\0\uba88\0\ubae6\0\ubb44"+
    "\0\ubba2\0\ubc00\0\ubc5e\0\ubcbc\0\ubd1a\0\ubd78\0\ubdd6\0\ube34"+
    "\0\ube92\0\ubef0\0\ubf4e\0\ubfac\0\uc00a\0\uc068\0\uc0c6\0\u0b04"+
    "\0\uc124\0\uc182\0\uc1e0\0\uc23e\0\uc29c\0\uc2fa\0\uc358\0\uc3b6"+
    "\0\uc414\0\uc472\0\uc4d0\0\uc52e\0\uc58c\0\uc5ea\0\uc648\0\uc6a6"+
    "\0\uc704\0\uc762\0\uc7c0\0\uc81e\0\uc87c\0\uc8da\0\uc938\0\uc996"+
    "\0\uc9f4\0\uca52\0\ucab0\0\ucb0e\0\ucb6c\0\ucbca\0\ucc28\0\ucc86"+
    "\0\ucce4\0\ucd42\0\ucda0\0\ucdfe\0\uce5c\0\uceba\0\ucf18\0\ucf76"+
    "\0\ucfd4\0\ud032\0\ud090\0\ud0ee\0\ud14c\0\ud1aa\0\ud208\0\ud266"+
    "\0\ud2c4\0\ud322\0\ud380\0\ud3de\0\ud43c\0\ud49a\0\ud4f8\0\ud556"+
    "\0\ud5b4\0\ud612\0\ud670\0\ud6ce\0\ud72c\0\ud78a\0\ud7e8\0\ud846"+
    "\0\ud8a4\0\ud902\0\ud960\0\ud9be\0\uda1c\0\u0178\0\uda7a\0\udad8"+
    "\0\udb36\0\udb94\0\udbf2\0\udc50\0\udcae\0\udd0c\0\udd6a\0\uddc8"+
    "\0\ude26\0\ude84\0\udee2\0\udf40\0\udf9e\0\udffc\0\ue05a\0\ue0b8"+
    "\0\ue116\0\ue174\0\ue1d2\0\ue230\0\ue28e\0\ue2ec\0\ue34a\0\ue3a8"+
    "\0\ue406\0\ue464\0\ue4c2\0\ue520\0\ue57e\0\ue5dc\0\ue63a\0\ue698"+
    "\0\ue6f6\0\ue754\0\ue7b2\0\ue810\0\ue86e\0\ue8cc\0\ue92a\0\ue988"+
    "\0\ue9e6\0\uea44\0\ueaa2\0\ueb00";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\0\2\6\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\2\16\1\10\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\10\25\1\26\1\27\1\10\1\30"+
    "\1\13\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\43\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\3\43\1\13\1\10\1\43\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\2\43\1\71"+
    "\1\72\1\73\1\74\1\75\1\43\1\76\1\77\1\100"+
    "\1\101\1\43\1\102\1\43\1\103\2\16\1\5\1\0"+
    "\2\104\1\105\13\104\1\106\67\104\1\107\1\104\1\110"+
    "\16\104\1\111\6\104\2\112\1\113\13\112\1\114\17\112"+
    "\1\115\3\112\1\116\43\112\1\117\1\112\1\120\16\112"+
    "\1\121\2\112\1\122\3\112\2\123\1\124\103\123\1\125"+
    "\1\123\1\126\16\123\1\127\6\123\137\0\1\6\2\0"+
    "\2\6\167\0\1\13\76\0\2\11\1\130\4\11\1\131"+
    "\65\11\1\132\40\11\10\0\1\133\137\0\1\13\24\0"+
    "\1\13\76\0\2\15\1\134\10\15\1\135\61\15\1\136"+
    "\40\15\17\0\1\13\17\0\1\13\117\0\1\13\15\0"+
    "\1\13\122\0\11\137\117\0\1\140\4\0\1\141\13\0"+
    "\1\13\120\0\1\142\1\0\11\143\1\144\5\0\1\144"+
    "\1\145\2\144\1\146\6\144\1\147\16\144\4\0\1\144"+
    "\1\145\2\144\1\146\6\144\1\147\15\144\26\0\1\142"+
    "\1\0\11\25\1\144\5\0\4\144\1\146\6\144\1\147"+
    "\16\144\2\0\1\150\1\0\4\144\1\146\6\144\1\147"+
    "\15\144\47\0\1\151\1\0\1\151\1\0\1\151\1\0"+
    "\1\151\4\0\1\151\3\0\1\151\1\0\1\151\1\0"+
    "\1\151\3\0\1\151\101\0\1\152\1\13\135\0\1\13"+
    "\1\153\140\0\32\154\2\0\1\154\1\0\31\154\30\0"+
    "\11\43\6\0\15\43\1\155\3\43\1\156\10\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\1\157\12\43"+
    "\1\160\2\43\1\161\13\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\7\43\1\162\6\43\1\163\5\43"+
    "\1\164\5\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\1\165\1\166\2\43\1\167\3\43\1\170\5\43"+
    "\1\171\5\43\1\172\5\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\21\43\1\173\10\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\10\43\1\174\2\43"+
    "\1\175\10\43\1\176\5\43\2\0\1\43\1\0\1\177"+
    "\30\43\30\0\11\43\6\0\13\43\1\200\16\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\1\201\3\43"+
    "\1\202\3\43\1\203\21\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\15\43\1\204\1\43\1\205\12\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\1\206"+
    "\7\43\1\207\5\43\1\210\13\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\1\211\7\43\1\212\5\43"+
    "\1\213\13\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\1\214\15\43\1\215\5\43\1\216\5\43\2\0"+
    "\1\43\1\0\16\43\1\217\12\43\30\0\11\43\6\0"+
    "\1\43\1\220\30\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\1\221\7\43\1\222\5\43\1\223\13\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\1\224"+
    "\31\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\2\43\1\225\1\43\1\226\2\43\1\227\13\43\1\230"+
    "\4\43\1\231\1\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\1\232\3\43\1\233\3\43\1\234\21\43"+
    "\2\0\1\43\1\0\21\43\1\235\7\43\30\0\11\43"+
    "\6\0\24\43\1\236\5\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\1\237\3\43\1\240\3\43\1\241"+
    "\5\43\1\236\13\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\1\242\31\43\2\0\1\43\1\0\31\43"+
    "\4\0\1\57\5\0\3\57\1\0\3\57\1\0\2\57"+
    "\1\0\15\57\1\0\1\57\1\0\72\57\2\0\1\57"+
    "\24\0\11\43\6\0\32\43\2\0\1\43\1\0\13\43"+
    "\1\243\1\43\1\244\4\43\1\245\3\43\1\246\2\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\21\43"+
    "\1\247\6\43\1\250\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\1\251\5\43\1\252\4\43\1\253\2\43"+
    "\1\254\2\43\1\255\1\256\6\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\4\43\1\257\11\43\1\250"+
    "\12\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\13\43\1\260\13\43\1\261\1\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\1\262\7\43\1\263\5\43"+
    "\1\264\2\43\1\265\2\43\1\266\4\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\13\43\1\267\2\43"+
    "\1\250\2\43\1\270\7\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\1\271\30\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\5\43\1\250\6\43\1\272"+
    "\1\273\4\43\1\250\6\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\1\274\3\43\1\275\3\43\1\276"+
    "\20\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\1\277\15\43\1\300\5\43\1\301\4\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\16\43\1\302\12\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\15\43"+
    "\1\250\3\43\1\303\7\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\1\304\7\43\1\305\20\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\1\306\3\43"+
    "\1\307\24\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\4\43\1\310\24\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\7\43\1\311\1\312\5\43\1\313"+
    "\2\43\1\314\7\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\17\43\1\315\2\43\1\316\6\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\7\43\1\317"+
    "\1\320\20\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\10\43\1\321\20\43\4\0\2\104\1\0\13\104"+
    "\1\0\67\104\1\0\1\104\1\0\16\104\1\0\6\104"+
    "\23\0\1\322\223\0\1\323\12\0\1\324\135\0\1\325"+
    "\140\0\1\326\6\0\2\112\1\0\13\112\1\0\17\112"+
    "\1\0\3\112\1\0\43\112\1\0\1\112\1\0\16\112"+
    "\1\0\2\112\1\0\3\112\23\0\1\327\135\0\1\330"+
    "\14\0\1\331\2\0\32\332\4\0\31\332\105\0\1\333"+
    "\1\0\1\334\1\335\1\336\3\0\1\337\5\0\1\340"+
    "\1\341\1\0\1\342\1\343\1\344\1\0\1\345\120\0"+
    "\1\346\12\0\1\347\135\0\1\350\140\0\1\351\50\0"+
    "\1\352\73\0\2\123\1\0\103\123\1\0\1\123\1\0"+
    "\16\123\1\0\6\123\111\0\1\353\12\0\1\354\135\0"+
    "\1\355\140\0\1\356\6\0\7\130\1\0\65\130\1\357"+
    "\42\130\3\0\2\130\1\11\3\130\1\11\10\130\7\11"+
    "\42\130\1\11\4\130\1\11\3\130\1\11\7\130\1\11"+
    "\3\130\1\11\1\130\1\11\1\360\7\130\1\0\13\134"+
    "\1\135\61\134\1\361\40\134\2\362\1\0\4\362\1\15"+
    "\3\362\1\363\10\362\7\15\42\362\1\15\4\362\1\15"+
    "\3\362\1\15\7\362\1\15\3\362\1\15\1\362\1\15"+
    "\1\364\10\362\24\0\11\137\11\0\1\365\1\366\1\365"+
    "\33\0\1\365\1\366\1\365\45\0\1\367\141\0\1\144"+
    "\1\0\11\142\1\144\5\0\4\144\1\146\25\144\4\0"+
    "\4\144\1\146\24\144\26\0\1\142\1\0\11\143\1\144"+
    "\5\0\4\144\1\146\25\144\4\0\4\144\1\146\24\144"+
    "\26\0\1\144\1\0\12\144\5\0\32\144\4\0\31\144"+
    "\26\0\1\144\1\0\2\370\10\144\5\0\32\144\4\0"+
    "\31\144\23\0\1\371\1\0\1\371\1\144\1\0\12\144"+
    "\5\0\32\144\4\0\31\144\30\0\11\372\42\0\1\150"+
    "\75\0\1\13\1\10\121\0\11\154\6\0\32\154\2\0"+
    "\1\154\1\0\31\154\30\0\11\43\6\0\30\43\1\373"+
    "\1\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\4\43\1\374\25\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\21\43\1\373\10\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\16\43\1\375\13\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\16\43\1\376"+
    "\13\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\1\157\31\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\13\43\1\377\1\u0100\15\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\21\43\1\u0101\10\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\23\43\1\u0102"+
    "\6\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\16\43\1\u0103\13\43\2\0\1\u0104\1\0\31\43\30\0"+
    "\11\43\6\0\1\43\1\u0105\1\u0106\2\43\1\373\24\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\2\43"+
    "\1\u0107\27\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\24\43\1\u0108\5\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\21\43\1\u0109\10\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\21\43\1\u010a\10\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\21\43"+
    "\1\206\10\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\16\43\1\u010b\13\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\15\43\1\u010c\14\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\13\43\1\u010d\15\43\30\0\11\43\6\0\16\43"+
    "\1\u010e\13\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\15\43\1\u010f\4\43\1\u0110\7\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\1\u0111\31\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\15\43\1\u0112"+
    "\4\43\1\u0113\7\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\3\43\1\u0114\1\43\1\u0115\15\43\1\u0116"+
    "\6\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\1\u0117\31\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\22\43\1\u0118\7\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\15\43\1\222\4\43\1\u0118\7\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\15\43"+
    "\1\u0119\14\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\23\43\1\u011a\6\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\15\43\1\u011b\14\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\15\43\1\u011c\14\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\15\43"+
    "\1\u011d\14\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\15\43\1\222\14\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\13\43\1\376\16\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\15\43\1\u011e\13\43\30\0\11\43\6\0\11\43"+
    "\1\u011f\20\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\10\43\1\157\21\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\4\43\1\373\25\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\10\43\1\u0120\21\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\15\43"+
    "\1\u0121\14\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\1\u0122\20\43\1\u0123\10\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\2\43\1\u0124\20\43\1\373"+
    "\6\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\1\u0125\15\43\1\u0126\13\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\21\43\1\u0127\10\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\14\43\1\u0128\15\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\1\43"+
    "\1\u0129\6\43\1\376\21\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\22\43\1\u012a\7\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\14\43\1\u012b\15\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\24\43\1\u011e\4\43\30\0\11\43"+
    "\6\0\10\43\1\u0111\21\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\13\43\1\u012c\5\43\1\373\10\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\2\43"+
    "\1\u012d\27\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\4\43\1\u012e\25\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\21\43\1\u012f\10\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\23\43\1\u0130\5\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\3\43\1\250\25\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\2\43\1\250\17\43"+
    "\1\u0131\5\43\1\u0132\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\1\u0133\30\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\4\43\1\u0134\24\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\23\43\1\u0135\5\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\21\43"+
    "\1\270\7\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\1\u0136\30\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\15\43\1\u0137\13\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\4\43\1\u0138\24\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\16\43\1\u0139"+
    "\12\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\5\43\1\u013a\5\43\1\u013b\6\43\1\u013c\6\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\10\43\1\u013d"+
    "\11\43\1\316\6\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\2\43\1\u013e\1\43\1\u013c\24\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\13\43\1\u013f"+
    "\15\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\15\43\1\u0140\13\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\21\43\1\u0141\7\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\16\43\1\u0142\12\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\13\43\1\u0143"+
    "\15\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\16\43\1\u0144\12\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\16\43\1\u0145\12\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\25\43\1\u0146\3\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\17\43\1\256"+
    "\11\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\15\43\1\u0147\4\43\1\u0131\1\u0148\5\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\14\43\1\u0149\14\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\5\43"+
    "\1\u014a\23\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\14\43\1\u0133\14\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\17\43\1\u014b\11\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\3\43\1\u014c\25\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\23\43"+
    "\1\u014d\5\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\15\43\1\u014e\5\43\1\250\5\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\3\43\1\u0130\25\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\21\43"+
    "\1\u014f\1\u0150\6\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\25\43\1\u0151\3\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\10\43\1\u0152\20\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\23\43\1\u0153"+
    "\5\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\13\43\1\u0154\7\43\1\250\5\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\21\43\1\u0155\7\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\14\43\1\u0130"+
    "\14\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\17\43\1\250\11\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\1\u0156\23\43\1\u0157\3\43\1\250\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\3\43\1\u0138"+
    "\25\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\4\43\1\250\24\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\4\43\1\u0158\3\43\1\u0159\20\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\23\43\1\u015a"+
    "\5\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\4\43\1\u015b\24\43\120\0\1\u015c\141\0\1\u015d\141\0"+
    "\1\u015e\140\0\1\u015f\46\0\1\331\2\0\32\332\4\0"+
    "\31\332\4\0\40\332\1\331\75\332\125\0\1\u0160\111\0"+
    "\1\u0161\141\0\1\u0162\160\0\1\u0163\123\0\1\u0164\121\0"+
    "\1\u0165\134\0\1\u0166\141\0\1\u0167\135\0\1\u0168\3\0"+
    "\1\u0169\134\0\1\u016a\6\0\1\u016b\5\0\1\u016c\115\0"+
    "\1\u016d\144\0\1\u016e\141\0\1\u016f\141\0\1\u0170\140\0"+
    "\1\u0171\111\0\1\u0172\1\u0173\4\0\1\u0174\2\0\1\u0175"+
    "\11\0\1\u0176\123\0\1\u0177\141\0\1\u0178\141\0\1\u0179"+
    "\140\0\1\u017a\6\0\2\130\3\0\130\130\1\0\7\130"+
    "\1\0\14\130\11\u017b\6\130\6\u017b\24\130\1\357\3\130"+
    "\6\u017b\27\130\7\0\1\134\3\0\1\134\10\0\7\134"+
    "\42\0\1\134\4\0\1\134\3\0\1\134\7\0\1\134"+
    "\3\0\1\134\1\0\1\134\1\u017c\10\0\2\362\1\0"+
    "\10\362\1\u017d\124\362\1\0\10\362\1\u017d\10\362\11\u017e"+
    "\6\362\6\u017e\30\362\6\u017e\27\362\17\0\1\371\1\0"+
    "\1\371\2\0\11\u017f\124\0\1\u0180\134\0\1\144\1\0"+
    "\2\370\10\144\5\0\32\144\2\0\1\u0181\1\0\31\144"+
    "\30\0\11\u017f\125\0\11\372\21\0\1\u0182\20\0\1\150"+
    "\14\0\1\u0182\45\0\11\43\6\0\1\373\31\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\1\43\1\373"+
    "\30\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\13\43\1\373\16\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\24\43\1\u0183\5\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\17\43\1\u0184\12\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\21\43\1\u0185"+
    "\10\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\4\43\1\u0186\25\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\1\43\1\u0187\30\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\14\43\1\u0188\15\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\24\43\1\u0119"+
    "\5\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\10\43\1\u0189\21\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\23\43\1\u018a\6\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\1\43\1\u018b\30\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\1\u018c\31\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\16\43"+
    "\1\157\13\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\1\u0118\31\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\2\43\1\u018d\27\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\22\43\1\u011e\6\43\30\0\11\43\6\0\1\43\1\u018e"+
    "\30\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\3\43\1\u018b\26\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\7\43\1\u018f\22\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\3\43\1\373\26\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\23\43\1\u0190"+
    "\6\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\23\43\1\u0191\6\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\4\43\1\u0192\25\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\16\43\1\373\13\43\2\0"+
    "\1\43\1\0\31\43\30\0\1\43\1\u0193\7\43\6\0"+
    "\32\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\3\43\1\u0194\26\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\23\43\1\373\6\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\6\43\1\373\23\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\21\43\1\u0195"+
    "\10\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\24\43\1\u0196\5\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\23\43\1\u0197\6\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\16\43\1\u0198\13\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\4\43\1\373\24\43\30\0\11\43\6\0"+
    "\4\43\1\u0199\25\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\15\43\1\u0118\14\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\6\43\1\222\23\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\13\43\1\162"+
    "\7\43\1\u019a\6\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\10\43\1\u019b\21\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\16\43\1\u019c\13\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\21\43\1\u019d"+
    "\10\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\21\43\1\u0118\10\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\10\43\1\210\21\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\1\43\1\161\30\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\13\43\1\u019e"+
    "\16\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\23\43\1\u019f\6\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\4\43\1\u01a0\25\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\24\43\1\222\5\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\23\43\1\u010a"+
    "\6\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\26\43\1\u019f\3\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\15\43\1\u0127\14\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\4\43\1\u01a1\24\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\4\43\1\u0139\24\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\15\43\1\u013c\13\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\10\43\1\u01a2"+
    "\20\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\1\u01a3\30\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\2\43\1\u015a\26\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\22\43\1\u0150\6\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\22\43\1\u01a2\1\u01a4"+
    "\5\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\1\u01a5\30\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\21\43\1\u01a2\7\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\6\43\1\250\22\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\4\43\1\u01a5\24\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\2\43"+
    "\1\250\26\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\5\43\1\250\23\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\4\43\1\u01a6\24\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\22\43\1\u0157\6\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\1\u01a7"+
    "\30\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\14\43\1\250\14\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\13\43\1\u01a8\15\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\1\43\1\u01a9\27\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\24\43\1\313"+
    "\4\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\10\43\1\u01aa\20\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\4\43\1\u01ab\24\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\16\43\1\250\12\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\1\43\1\u01ac"+
    "\27\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\23\43\1\u01ad\5\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\21\43\1\250\7\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\24\43\1\u0159\4\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\1\u01ae\30\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\13\43"+
    "\1\u01af\15\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\23\43\1\u01b0\5\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\22\43\1\250\6\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\16\43\1\u01b1\12\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\22\43"+
    "\1\316\6\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\24\43\1\u01b2\4\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\4\43\1\u01b3\24\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\16\43\1\u01b4\12\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\15\43"+
    "\1\u01b5\13\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\4\43\1\u01b6\24\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\21\43\1\316\7\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\13\43\1\316\15\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\43\1\0\7\43"+
    "\1\250\21\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\13\43\1\244\15\43\111\0\1\u015d\65\0\1\u01b7"+
    "\220\0\1\u01b8\37\0\1\u01b9\237\0\1\u01ba\135\0\1\u01bb"+
    "\131\0\1\u01bc\116\0\1\u01bd\1\0\1\u01be\136\0\1\u01bf"+
    "\17\0\1\u01c0\134\0\1\u01c1\134\0\1\u01c2\137\0\1\u01c3"+
    "\116\0\1\u01c4\14\0\1\u01c5\131\0\1\u01c6\141\0\1\u01c7"+
    "\117\0\1\u01c8\155\0\1\u01c9\133\0\1\u01ca\120\0\1\u016f"+
    "\65\0\1\u01cb\220\0\1\u01cc\37\0\1\u01cd\232\0\1\u01ce"+
    "\135\0\1\u01cf\134\0\1\u01d0\130\0\1\u01d1\125\0\1\u01d2"+
    "\141\0\1\u0178\65\0\1\u01d3\220\0\1\u01d4\37\0\1\u01d5"+
    "\113\0\7\130\1\0\14\130\11\u01d6\6\130\6\u01d6\24\130"+
    "\1\357\3\130\6\u01d6\27\130\24\0\11\u01d7\6\0\6\u01d7"+
    "\30\0\6\u01d7\27\0\2\362\1\0\10\362\1\u017d\10\362"+
    "\11\u01d8\6\362\6\u01d8\30\362\6\u01d8\27\362\24\0\11\u017f"+
    "\11\0\1\365\1\0\1\365\33\0\1\365\1\0\1\365"+
    "\53\0\2\u01d9\51\0\1\u0181\62\0\11\43\6\0\14\43"+
    "\1\u01da\15\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\13\43\1\u0114\2\43\1\373\13\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\4\43\1\u0120\25\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\23\43"+
    "\1\u01db\6\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\11\43\1\u01dc\20\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\1\u01dd\31\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\14\43\1\u01de\15\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\10\43\1\u01df"+
    "\21\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\13\43\1\222\16\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\23\43\1\u01e0\6\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\23\43\1\u01e1\6\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\1\376\31\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\u01e2\1\0\31\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\u01e3\1\0\31\43\30\0\11\43\6\0\16\43"+
    "\1\u01e4\13\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\27\43\1\373\2\43\2\0\1\43\1\0\31\43"+
    "\30\0\2\43\1\u01e5\6\43\6\0\32\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\3\43\1\157\26\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\10\43"+
    "\1\u0192\21\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\23\43\1\222\6\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\7\43\1\373\22\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\23\43\1\u01e6\6\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\2\43"+
    "\1\u0118\27\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\23\43\1\u01e7\6\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\17\43\1\u012a\12\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\15\43\1\u0111\14\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\4\43"+
    "\1\u0111\25\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\4\43\1\u01e8\25\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\32\43\2\0\1\u01e9\1\0\31\43"+
    "\30\0\11\43\6\0\22\43\1\u01ea\7\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\23\43\1\250\5\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\12\43\1\250\16\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\4\43\1\u01eb\3\43"+
    "\1\u01ec\20\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\23\43\1\316\5\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\17\43\1\u01a2\11\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\13\43\1\u01ed\15\43"+
    "\11\0\1\u01ee\16\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\1\u01ef\30\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\15\43\1\u01f0\13\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\21\43\1\u01a8\7\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\3\43\1\u01f1"+
    "\25\43\11\0\1\u01f2\16\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\1\43\1\u0159\27\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\16\43\1\u01f3\12\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\10\43\1\u01f4"+
    "\20\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\23\43\1\u01f5\5\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\21\43\1\u01f6\7\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\2\43\1\u01a2\26\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\26\43\1\250"+
    "\2\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\22\43\1\u01f7\6\43\27\0\1\u01f8\147\0\1\u01b7\65\0"+
    "\1\u015d\20\0\1\u01f9\1\0\1\u01f9\1\u01b9\11\u01f9\12\u01b9"+
    "\1\u01f9\1\0\1\u01f9\1\0\2\u01f9\32\u01b9\2\0\1\u01f9"+
    "\1\0\31\u01b9\114\0\1\u01fa\132\0\1\u01fb\152\0\1\u01fc"+
    "\130\0\1\u01fd\125\0\1\u01fe\6\0\1\u01ff\126\0\1\u0200"+
    "\135\0\1\u0201\147\0\1\u0202\117\0\1\u0203\161\0\1\u0204"+
    "\121\0\1\u0205\127\0\1\u0206\137\0\1\u0207\11\0\1\u0208"+
    "\135\0\1\u01c4\135\0\1\u0209\141\0\1\u020a\35\0\1\u020b"+
    "\147\0\1\u01cb\65\0\1\u016f\20\0\1\u020c\1\0\1\u020c"+
    "\1\u01cd\11\u020c\12\u01cd\1\u020c\1\0\1\u020c\1\0\2\u020c"+
    "\32\u01cd\2\0\1\u020c\1\0\31\u01cd\110\0\1\u020d\134\0"+
    "\1\u020e\142\0\1\u020f\143\0\1\u0210\5\0\1\u0211\125\0"+
    "\1\u0212\44\0\1\u0213\147\0\1\u01d3\65\0\1\u0178\20\0"+
    "\1\u0214\1\0\1\u0214\1\u01d5\11\u0214\12\u01d5\1\u0214\1\0"+
    "\1\u0214\1\0\2\u0214\32\u01d5\2\0\1\u0214\1\0\31\u01d5"+
    "\4\0\7\130\1\0\14\130\11\u0215\6\130\6\u0215\24\130"+
    "\1\357\3\130\6\u0215\27\130\24\0\11\u0216\6\0\6\u0216"+
    "\30\0\6\u0216\27\0\2\362\1\0\10\362\1\u017d\10\362"+
    "\11\u0217\6\362\6\u0217\30\362\6\u0217\27\362\24\0\11\43"+
    "\6\0\15\43\1\373\14\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\10\43\1\u0218\21\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\32\43\2\0\1\u0219"+
    "\1\0\31\43\30\0\11\43\6\0\15\43\1\u021a\14\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\1\u021b"+
    "\31\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\16\43\1\u021c\13\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\10\43\1\u021d\21\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\10\43\1\u021e\21\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\17\43\1\u021f"+
    "\12\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\2\43\1\u0220\1\43\1\u0221\2\43\1\u0222\2\43\1\u0223"+
    "\7\43\1\u0224\2\43\1\u0225\4\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\6\43\1\u0226\23\43\2\0"+
    "\1\43\1\0\31\43\30\0\7\43\1\373\1\43\6\0"+
    "\32\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\10\43\1\234\21\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\4\43\1\157\25\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\32\43\2\0\1\u0227\1\0"+
    "\31\43\30\0\11\43\6\0\4\43\1\u0228\25\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\23\43\1\u0229"+
    "\6\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\27\43\1\u01a2\1\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\15\43\1\u022a"+
    "\13\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\13\43\1\u022b\15\43\116\0\1\u022c\47\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\13\43\1\250\15\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\1\250\30\43"+
    "\116\0\1\u022c\10\0\1\u022d\36\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\2\43\1\u01a9\26\43\30\0\11\43"+
    "\6\0\32\43\2\0\1\43\1\0\23\43\1\u022e\5\43"+
    "\11\0\1\u022f\16\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\32\43\2\0\1\43"+
    "\1\0\15\43\1\u0230\13\43\30\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\1\u0231\30\43\27\0\1\u01b9\231\0"+
    "\1\u0232\125\0\1\u0233\133\0\1\u0234\150\0\1\u0235\135\0"+
    "\1\u0236\142\0\1\u0237\140\0\1\u01c4\127\0\1\u0238\127\0"+
    "\1\u0239\136\0\1\u01c4\142\0\1\u023a\114\0\1\u023b\141\0"+
    "\1\u01c4\131\0\1\u023c\163\0\1\u023d\130\0\1\u023e\124\0"+
    "\1\u023f\47\0\1\u01cd\217\0\1\u0240\114\0\1\u0241\156\0"+
    "\1\u0242\143\0\1\u0240\127\0\1\u0243\155\0\1\u020d\33\0"+
    "\1\u01d5\112\0\7\130\1\0\14\130\11\11\6\130\6\11"+
    "\24\130\1\357\3\130\6\11\27\130\24\0\11\u0244\6\0"+
    "\6\u0244\30\0\6\u0244\27\0\2\362\1\0\10\362\1\u017d"+
    "\10\362\11\15\6\362\6\15\30\362\6\15\27\362\24\0"+
    "\11\43\6\0\14\43\1\222\15\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\2\43\1\u0245\1\u0246\26\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\1\u0121"+
    "\31\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\13\43\1\u0247\16\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\15\43\1\u0248\14\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\16\43\1\u01da\13\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\16\43\1\u0249"+
    "\13\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\23\43\1\u01da\6\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\16\43\1\u024a\13\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\27\43\1\u024b\2\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\1\u024c\31\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\4\43"+
    "\1\u024d\25\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\4\43\1\u024e\10\43\1\u024f\14\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\4\43\1\u0250\25\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\21\43"+
    "\1\u0251\10\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\21\43\1\u0252\4\43\1\u0253\3\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\27\43\1\u0254\2\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\1\u0255"+
    "\31\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\24\43\1\316\4\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\30\43\1\250"+
    "\123\0\1\u0256\123\0\1\u0257\54\0\11\43\6\0\32\43"+
    "\2\0\1\43\1\0\10\43\1\u0258\20\43\106\0\1\u0259"+
    "\57\0\11\43\6\0\32\43\2\0\1\43\1\0\2\43"+
    "\1\u025a\26\43\126\0\1\u01c4\132\0\1\u025b\121\0\1\u025c"+
    "\146\0\1\u0206\145\0\1\u020a\115\0\1\u0206\147\0\1\u025d"+
    "\124\0\1\u025e\146\0\1\u01c4\133\0\1\u025f\125\0\1\u0260"+
    "\154\0\1\u01c4\123\0\1\u025d\143\0\1\u023a\16\0\133\u0240"+
    "\1\u01c4\2\u0240\117\0\1\u0261\140\0\1\u0262\135\0\1\u0263"+
    "\37\0\11\134\6\0\6\134\30\0\6\134\53\0\11\43"+
    "\6\0\21\43\1\u0264\10\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\4\43\1\u0265\25\43\2\0\1\43"+
    "\1\0\31\43\30\0\3\43\1\u0266\2\43\1\u0267\2\43"+
    "\6\0\32\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\1\u0268\31\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\15\43\1\u0269\14\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\14\43\1\u026a\15\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\17\43\1\u026b"+
    "\12\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\22\43\1\u0197\7\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\4\43\1\u026c\25\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\20\43\1\373\11\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\1\u026d\31\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\2\43"+
    "\1\u026e\27\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\1\u026f\31\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\4\43\1\202\25\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\21\43\1\u0270\10\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\4\43\1\u0271"+
    "\25\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\14\43\1\u0272\15\43\2\0\1\43\1\0\31\43\115\0"+
    "\1\u0273\141\0\1\u0274\44\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\16\43\1\u0275\12\43\135\0\1\u0276\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\23\43\1\u0277"+
    "\5\43\126\0\1\u0278\114\0\1\u0279\135\0\1\u027a\160\0"+
    "\1\u0206\57\0\1\u027b\1\0\1\u027c\210\0\1\u027d\131\0"+
    "\1\u027e\127\0\1\u027f\125\0\1\u0280\60\0\11\43\6\0"+
    "\4\43\1\u0281\25\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\13\43\1\u0282\16\43\2\0\1\43\1\0"+
    "\31\43\30\0\2\43\1\373\6\43\6\0\32\43\2\0"+
    "\1\43\1\0\31\43\30\0\4\43\1\373\4\43\6\0"+
    "\32\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\21\43\1\155\10\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\3\43\1\u0283\26\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\17\43\1\u0284\12\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\13\43\1\u0285"+
    "\16\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\17\43\1\u0286\12\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\17\43\1\u0287\12\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\23\43\1\u0288\6\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\14\43\1\373"+
    "\15\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\10\43\1\u0196\21\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\2\43\1\373\27\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\17\43\1\373\12\43\2\0"+
    "\1\43\1\0\31\43\122\0\1\u0276\130\0\1\u01ee\50\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\15\43\1\u0289"+
    "\13\43\30\0\11\43\6\0\32\43\2\0\1\43\1\0"+
    "\10\43\1\u028a\20\43\135\0\1\u01c4\130\0\1\u028b\125\0"+
    "\1\u01c4\122\0\1\u028c\145\0\1\u028d\125\0\1\u028e\160\0"+
    "\1\u0240\135\0\1\u028f\125\0\1\u0240\45\0\11\43\6\0"+
    "\1\u0196\31\43\2\0\1\43\1\0\31\43\30\0\11\43"+
    "\6\0\4\43\1\u0196\25\43\2\0\1\43\1\0\31\43"+
    "\30\0\11\43\6\0\4\43\1\u0290\25\43\2\0\1\43"+
    "\1\0\31\43\30\0\11\43\6\0\21\43\1\u0291\10\43"+
    "\2\0\1\43\1\0\31\43\30\0\11\43\6\0\1\u0292"+
    "\31\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\16\43\1\u0293\13\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\22\43\1\u0294\7\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\16\43\1\u0295\13\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\32\43\2\0"+
    "\1\43\1\0\4\43\1\u0296\24\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\16\43\1\u0297\12\43\111\0"+
    "\1\u0298\154\0\1\u0299\116\0\1\u029a\136\0\1\u029b\75\0"+
    "\1\u029c\113\0\11\43\6\0\5\43\1\373\24\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\4\43\1\u029d"+
    "\25\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\10\43\1\u01da\21\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\21\43\1\u029e\10\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\7\43\1\u029f\22\43\2\0"+
    "\1\43\1\0\31\43\30\0\11\43\6\0\21\43\1\u02a0"+
    "\10\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\32\43\2\0\1\43\1\0\3\43\1\u01f5\25\43\30\0"+
    "\11\43\6\0\32\43\2\0\1\43\1\0\15\43\1\250"+
    "\13\43\110\0\1\u01c4\132\0\1\u01c4\150\0\1\u0298\126\0"+
    "\1\u02a1\147\0\1\u02a2\42\0\11\43\6\0\22\43\1\u02a3"+
    "\7\43\2\0\1\43\1\0\31\43\30\0\11\43\6\0"+
    "\3\43\1\u01e7\26\43\2\0\1\43\1\0\31\43\30\0"+
    "\11\43\6\0\16\43\1\u0118\13\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\10\43\1\u02a4\21\43\2\0"+
    "\1\43\1\0\31\43\130\0\1\u0278\114\0\1\u0240\56\0"+
    "\11\43\6\0\22\43\1\373\7\43\2\0\1\43\1\0"+
    "\31\43\30\0\11\43\6\0\31\43\1\u019d\2\0\1\43"+
    "\1\0\31\43\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[60254];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\3\1\1\11\2\1\1\11"+
    "\1\1\1\11\64\1\1\11\5\1\1\11\10\1\1\11"+
    "\4\1\1\11\1\1\1\11\1\0\1\11\3\1\1\11"+
    "\6\1\1\0\1\11\1\0\147\1\1\11\4\0\1\11"+
    "\1\0\1\11\25\0\2\1\1\0\3\1\1\11\1\0"+
    "\2\1\1\0\142\1\37\0\1\1\1\0\1\11\2\1"+
    "\1\11\1\0\1\11\64\1\2\0\1\1\12\0\1\11"+
    "\10\0\1\1\7\0\2\1\1\0\26\1\1\0\3\1"+
    "\1\0\5\1\35\0\1\1\1\0\25\1\2\0\1\1"+
    "\1\0\2\1\23\0\21\1\2\0\1\1\1\0\1\1"+
    "\4\0\1\1\4\0\17\1\2\0\1\1\1\11\1\1"+
    "\11\0\12\1\5\0\10\1\5\0\4\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public XXDBTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public XXDBTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL[zzCurrentPosL++];
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }  // fall though
            case 677: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }  // fall though
            case 678: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }  // fall though
            case 679: break;
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }  // fall though
            case 680: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addToken(Token.ERROR_IDENTIFIER);
            }
            // fall through
          case 37: break;
          case 2:
            { addToken(Token.WHITESPACE);
            }
            // fall through
          case 38: break;
          case 3:
            { addNullToken(); return firstToken;
            }
            // fall through
          case 39: break;
          case 4:
            { addToken(Token.OPERATOR);
            }
            // fall through
          case 40: break;
          case 5:
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
            // fall through
          case 41: break;
          case 6:
            { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
            // fall through
          case 42: break;
          case 7:
            { addToken(Token.SEPARATOR);
            }
            // fall through
          case 43: break;
          case 8:
            { addToken(Token.IDENTIFIER);
            }
            // fall through
          case 44: break;
          case 9:
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
            // fall through
          case 45: break;
          case 10:
            { addToken(Token.ANNOTATION);
            }
            // fall through
          case 46: break;
          case 11:
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
            // fall through
          case 47: break;
          case 12:
            { addToken(Token.DATA_TYPE);
            }
            // fall through
          case 48: break;
          case 13:
            { 
            }
            // fall through
          case 49: break;
          case 14:
            { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            // fall through
          case 50: break;
          case 15:
            { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            // fall through
          case 51: break;
          case 16:
            { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            // fall through
          case 52: break;
          case 17:
            { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
            }
            // fall through
          case 53: break;
          case 18:
            { addToken(Token.LITERAL_CHAR);
            }
            // fall through
          case 54: break;
          case 19:
            { addToken(Token.LITERAL_NUMBER_FLOAT);
            }
            // fall through
          case 55: break;
          case 20:
            { start = zzMarkedPos-2; yybegin(MLC);
            }
            // fall through
          case 56: break;
          case 21:
            { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
            }
            // fall through
          case 57: break;
          case 22:
            { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
            }
            // fall through
          case 58: break;
          case 23:
            { addToken(Token.FUNCTION);
            }
            // fall through
          case 59: break;
          case 24:
            { addToken(Token.RESERVED_WORD);
            }
            // fall through
          case 60: break;
          case 25:
            { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
            }
            // fall through
          case 61: break;
          case 26:
            { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
            }
            // fall through
          case 62: break;
          case 27:
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
            }
            // fall through
          case 63: break;
          case 28:
            { addToken(Token.ERROR_CHAR);
            }
            // fall through
          case 64: break;
          case 29:
            { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
            }
            // fall through
          case 65: break;
          case 30:
            { addToken(Token.COMMENT_MULTILINE);
            }
            // fall through
          case 66: break;
          case 31:
            { addToken(Token.LITERAL_BOOLEAN);
            }
            // fall through
          case 67: break;
          case 32:
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
            }
            // fall through
          case 68: break;
          case 33:
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
            }
            // fall through
          case 69: break;
          case 34:
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
            }
            // fall through
          case 70: break;
          case 35:
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
            }
            // fall through
          case 71: break;
          case 36:
            { addToken(Token.RESERVED_WORD_2);
            }
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
